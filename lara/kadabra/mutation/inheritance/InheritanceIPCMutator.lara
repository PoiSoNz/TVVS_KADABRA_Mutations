import lara.mutation.Mutator;

/**
 *  @param {$joinpoint} $joinpoint - Joinpoint used as starting point to search for super constructor calls to be removed.
 */
var InheritanceIPCMutator = function($joinpoint) {
	// Parent constructor
   	Mutator.call(this);

	// Instance variables
	this.toMutate = [];
	this.currentIndex = 0;
	
	this.originalSuperCall = undefined;
	this.$superCall = undefined;
	
	// Checks
	var extraArgs = arrayFromArgs(arguments, 1);
	if(extraArgs.length != 0)
		throw "Expected only 1 argument but received " + (this.extraArgs.length + 1);

	this.extractMutationTargets($joinpoint);
};

// Inheritance
InheritanceIPCMutator.prototype = Object.create(Mutator.prototype);


/*** IMPLEMENTATION OF INSTANCE METHODS ***/

// Store super constructor calls
InheritanceIPCMutator.prototype.extractMutationTargets = function($joinpoint) {

	for($constructor of WeaverJps.searchFrom($joinpoint, 'constructor').get()) {
		// Check if constructor contains a super call in its source code
		if(!$constructor.srcCode.includes('super('))
			continue;
			
		// Search for super calls inside constructors (since they can only appear inside constructors, we avoid searching the whole program)
		for($descendant of $constructor.descendants) {
			if(	$descendant.instanceOf('call') && 
				$descendant.srcCode.startsWith('super(') && 
				$descendant.srcCode.endsWith(')')
			) {
				this.toMutate.push($descendant);
				break;
			}
		}
	}
}

InheritanceIPCMutator.prototype.hasMutations = function() {
	return this.currentIndex < this.toMutate.length;
}


InheritanceIPCMutator.prototype._mutatePrivate = function() {
	this.$superCall = this.toMutate[this.currentIndex++];
	this.originalSuperCall = this.$superCall.copy();

	// Replace super constructor call by a comment
	this.$superCall = this.$superCall.insertReplace("// Super constructor call has been removed");
}

InheritanceIPCMutator.prototype._restorePrivate = function() {
	this.$superCall = this.$superCall.insertReplace(this.originalSuperCall.srcCode);

	this.originalSuperCall = undefined;
	this.$superCall = undefined;
}
