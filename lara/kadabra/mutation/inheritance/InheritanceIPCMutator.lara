import lara.mutation.Mutator;

/**
 *  @param {$super} $super - A join point of type expression corresponding to a super constructor call.
 */
var InheritanceIPCMutator = function($super) {
	// Parent constructor
   	Mutator.call(this);

	// Instance variables
	this.$super = $super;
	this.originalSuperParent = undefined;
	this.superParent = $super.parent;
	this.mutationsArgs = arrayFromArgs(arguments, 1);
	this.mutated = false;
	
	if(this.mutationsArgs.length > 0)
		throw "InheritanceIPCMutator expects exactly one argument";
	println("chamando IPC na funÃƒÂ§ao:");
	println(this.$super.srcCode);
	
	 //TODO: verificar se ÃƒÆ’Ã‚Â© super
	if(!(this.$super.instanceOf('call') && this.$super.srcCode.startsWith("super(") && this.$super.srcCode.endsWith(")")))
		throw "InheritanceIPCMutator expects a call to the super constructor, i.e. \"super(...)\", got " + this.$super.srcCode + " instead";

};

// Inheritance
InheritanceIPCMutator.prototype = Object.create(Mutator.prototype);


/*** IMPLEMENTATION OF INSTANCE METHODS ***/

InheritanceIPCMutator.prototype.hasMutations = function() {
	return !this.mutated;
}


InheritanceIPCMutator.prototype._mutatePrivate = function() {
	println("mutate");
	this.originalSuperParent = this.$super.parent.copy();

	println("super parent antes");
	println(this.superParent.srcCode);
	
	// Remove super call
	this.$super.remove();

	println("super parent DEPOIS");
	println(this.superParent.srcCode);
	
	this.mutated = true;
}

InheritanceIPCMutator.prototype._restorePrivate = function() {
	println("INICIOU RESTORE");
	println("super parent antes do restore");
	println(this.superParent.srcCode);
	println("super parent a restaurar");
	println(this.originalSuperParent.srcCode);
	// Restore operator
	this.superParent = this.superParent.insertReplace(this.originalSuperParent.copy());
	this.originalSuperParent = undefined;
	println("FEZ RESTORE");
}
