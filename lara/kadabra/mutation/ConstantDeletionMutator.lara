import lara.mutation.Mutator;
import kadabra.KadabraNodes;

/**
 *  @param {$joinpoint} $joinpoint - Joinpoint used as starting point to search for constants to be deleted from binary expressions.
 *  @param {String} targetConstant - Target constant to be removed from binary expressions.
 */

var ConstantDeletionMutator = function($joinpoint, targetConstant) {
	// Parent constructor
    Mutator.call(this);

	// Instance variables
	this.toMutate = [];
	this.currentIndex = 0;
	
	this.targetConstant = [targetConstant, '(' + targetConstant + ')'];
	this.$originalNode = undefined;
	this.$node = undefined;
	
	// Checks
	var extraArgs = arrayFromArgs(arguments, 2);
	if(extraArgs.length != 0)
		throw "Expected only 2 argument but received " + (this.extraArgs.length + 2);

	this.extractMutationTargets($joinpoint);

	if(this.toMutate.length == 0)
		println("Found no suitable code to mutate");
};


// Inheritance
ConstantDeletionMutator.prototype = Object.create(Mutator.prototype);


/*** IMPLEMENTATION OF INSTANCE METHODS ***/

/* Analyze method binaryExpressions available for Constant Deletion mutation and store them */
ConstantDeletionMutator.prototype.extractMutationTargets = function($joinpoint) {
	for($binaryExpression of WeaverJps.searchFrom($joinpoint, 'binaryExpression').get()) {
	
		var $lhs = $binaryExpression.lhs;
		var $rhs = $binaryExpression.rhs;
		if((	(this.targetConstant.contains($lhs.srcCode) && $lhs.isFinal)
			|| (this.targetConstant.contains($rhs.srcCode) && $rhs.isFinal) )
			&& $binaryExpression.type !== 'boolean') {
			
			this.toMutate.push($binaryExpression);
		}
	}
}

ConstantDeletionMutator.prototype.hasMutations = function() {
	return this.currentIndex < this.toMutate.length;
}


ConstantDeletionMutator.prototype._mutatePrivate = function() {
	this.$node = this.toMutate[this.currentIndex++];

	this.$originalNode = this.$node.copy();

	if(this.targetConstant.contains(this.$node.lhs.srcCode)) {
		this.$node = this.$node.insertReplace(this.$node.rhs);
	} else if(this.targetConstant.contains(this.$node.rhs.srcCode)) {
		this.$node = this.$node.insertReplace(this.$node.lhs);
	}
	
}

ConstantDeletionMutator.prototype._restorePrivate = function() {
	this.$node = this.$node.insertReplace(this.$originalNode);

	this.$originalNode = undefined;
	this.$node = undefined;
}