import lara.mutation.Mutator;
import kadabra.KadabraNodes;

/**
 *  @param {$joinpoint} $joinpoint - Joinpoint used as starting point to search for non void method calls which will be replaced by a hardcoded value.
 *  Method call mutations:
 *  - If method type is primitive or boxed BOOLEAN, method call is replaced by false.
 *  - If method type is primitive INT, BYTE, SHORT OR LONG, method call is replaced by 0.
 *  - If method type is primitive FLOAT or DOUBLE, method call is replaced by 0.0.
 *  - If method type is primitive CHAR, method call is replaced by '\u0000'.
 *  - If method type is non of the above, method call is replaced by null.
 */
var NonVoidCallMutator = function($joinpoint) {
	// Parent constructor
    Mutator.call(this);

	// Instance variables
	this.toMutate = [];
	this.currentIndex = 0;
	
	this.originalCallNode = undefined;
	this.$callNode = undefined;
	
	// Checks
	var extraArgs = arrayFromArgs(arguments, 1);
	if(extraArgs.length != 0)
		throw "Expected only 1 argument but received " + (this.extraArgs.length + 1);

	this.extractMutationTargets($joinpoint);

	if(this.toMutate.length == 0)
		println("Found no suitable code to mutate");
};


// Inheritance
NonVoidCallMutator.prototype = Object.create(Mutator.prototype);


/*** IMPLEMENTATION OF INSTANCE METHODS ***/

// Analyze method calls available for Non Void Call mutation and store them
NonVoidCallMutator.prototype.extractMutationTargets = function($joinpoint) {

	// Map method call type to the respective mutation value (if a type is not on the list, it's mapped to 'null' value)
	var typeToValue = { 
		'boolean': 'false',
		'Boolean': 'false',
		'int': '0',
		'byte': '0',
		'short': '0',
		'long': '0',
		'float': '0.0',
		'double': '0.0',
		'char': '\u0000',
		'String': '\u0000'
	};
	var typeList = Object.keys(typeToValue);

	var validAncestors = ['assignment', 'localVariable', 'if', 'loop'];
	for(validAncestor of validAncestors) {
		for($ancestor of WeaverJps.searchFrom($joinpoint, validAncestor).get()) {
			/* When the ancester is an if or a loop, only the ancestors on the condition will be analyzed. 
			 Because the ones present in the body will be analyzed by assignment expressions. */
			var descendants = (validAncestor === 'if' || validAncestor === 'loop') ? $ancestor.cond.descendants : $ancestor.descendants;
			
			for($descendant of descendants) {
				// Search for non-void calls
				if($descendant.instanceOf('call') && $descendant.returnType !== 'void') {
					// Store call for later modification
					var mutationValue = typeList.includes($descendant.returnType) ? typeToValue[$descendant.returnType] : 'null';
					this.toMutate.push([$descendant, mutationValue]);
				}
			}
		}
	}
}

NonVoidCallMutator.prototype.hasMutations = function() {
	return this.currentIndex < this.toMutate.length;
}


NonVoidCallMutator.prototype._mutatePrivate = function() {
	var mutationInfo = this.toMutate[this.currentIndex++];

	this.$callNode = mutationInfo[0];
	var mutationValue = mutationInfo[1];

	this.originalCallNode = this.$callNode.copy();

	/* Char and String mutation value is a null character, which generates a null node when using it directly with insertReplace.
	   A KadabraNodes.literal is required to solve the problem */
	if(this.$callNode.returnType === 'char' || this.$callNode.returnType === 'String') {
		var mutatedNode = KadabraNodes.literal(mutationValue, this.$callNode.returnType);
		this.$callNode = this.$callNode.insertReplace(mutatedNode);
	} else {
		this.$callNode = this.$callNode.insertReplace(mutationValue);
	}
}

NonVoidCallMutator.prototype._restorePrivate = function() {
	this.$callNode = this.$callNode.insertReplace(this.originalCallNode.srcCode);

	this.originalCallNode = undefined;
	this.$callNode = undefined;
}